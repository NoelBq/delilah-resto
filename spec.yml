swagger: "2.0"
info:
  description: "This document contains the specifications to access and use Delilah-Rest贸's API."
  version: "1.0.0"
  title: "Delilah Rest贸"
  termsOfService: "http://delilahresto.com/terms/"
  contact:
    email: "api@delilahresto.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api"
tags:
  - name: "products"
    description: "Contains the available products of the Rest贸"
  - name: "orders"
    description: "Access to Rest贸 orders"
  - name: "users"
    description: "Operations about users"
schemes:
  - "https"
  - "http"
paths:
  /orders:
    get:
      tags:
        - "orders"
      summary: "Returns orders inventory"
      description: "Returns all the orders existing in the store"
      operationId: "getOrders"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/order_complete"
      security:
        - store_auth:
            - "write:orders"

    post:
      tags:
        - "orders"
      summary: "Add a new order to the store"
      description: ""
      operationId: "addOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/order_sent"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/order_complete"
        400:
          description: "User not found"
        405:
          description: "Missing Arguments"

  /orders/{userId}:
    get:
      tags:
        - "orders"
      summary: "Returns orders inventory of a specific user"
      description: "Returns all the orders of a specific user that existing in the store"
      operationId: "getOrdersByUserId"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "userId"
          description: "User id to get orders"
          required: true
          type: "integer"
          format: "int64"
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
      security:
        - store_auth:
            - "write:orders"
  
  /orders/{orderId}:
    put:
      tags:
        - "orders"
      summary: "Update the status of an existing order"
      description: ""
      operationId: "updateOrderStatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          description: "Order id to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Order status that needs to be updated in the store"
          required: true
          schema:
            $ref: "#/definitions/order_status_upload"
      responses:
        202:
          description: "Acepted"
        405:
          description: "Forbidden"
      security:
        - store_auth:
            - "write:orders"

    delete:
      tags:
        - "orders"
      summary: "Deletes an order"
      description: ""
      operationId: "deleteOrder"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "Order id to delete"
          required: true
          type: "integer"
          format: "int64"
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
      responses:
        204:
          description: "Deleted, no content"
        401:
          description: "Token has expired. Please login again"
        403:
          description: "Forbidden"
        404:
          description: "Order not found"
      security:
        - store_auth:
            - "write:products"

  /products:
    get:
      tags:
        - "products"
      summary: "Returns product inventory"
      description: "Returns all the products listed in the store"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product_stored"

    post:
      tags:
        - "products"
      summary: "Add a new product to the store"
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/product_upload"
      responses:
        200:
          description: "OK"
        405:
          description: "Forbidden"
      security:
        - store_auth:
            - "write:products"

  /products/{id}:
    put:
      tags:
        - "products"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Product's properties that need to be updated in the store"
          required: true
          schema:
            $ref: "#/definitions/product_upload"
      responses:
        200:
          description: "OK"
        405:
          description: "Forbidden"
      security:
        - store_auth:
            - "write:products"

    delete:
      tags:
        - "products"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Product id to delete"
          required: true
          type: "integer"
          format: "int64"
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
        405:
          description: "Forbidden"
      security:
        - store_auth:
            - "write:products"
 
  /users:
    get:
      tags:
        - "users"
      summary: "Returns users list"
      description: "Returns all the users registered in the store"
      operationId: "getUsers"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "authorization"
          description: "Authentication Token"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/user_registered"
        405:
          description: "Forbidden"
      security:
        - store_auth:
            - "write:users"
  /signup:
    post:
      tags:
        - "users"
      summary: "Create user"
      description: "Creates a new user into the store."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/user_register"
      responses:
        200:
          description: "OK"
  /login:
    post:
      tags:
        - "users"
      summary: "Logs user into the store"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "credentials"
          in: "body"
          description: "The email and password for login"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        405:
          description: "Invalid email / Wrong password supplied"

securityDefinitions:
  store_auth:
    type: "oauth2"
    authorizationUrl: "/login"
    flow: "implicit"
    scopes:
      write:products: "create, modify and delete products in the store"
      write:orders: "modify orders status in the store"
      write:users: "list the registered users"

definitions:
  user_register:
    type: "object"
    properties:
      fullname:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      password:
        type: "string"
      is_admin:
        type: "integer"
        minimum: 0
        maximum: 1

  user_registered:
    type: "object"
    properties:
      id:
        type: "number"
      fullname:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      password:
        type: "string"
      is_admin:
        type: "integer"
        minimum: 0
        maximum: 1

  userId:
    type: "object"
    properties:
      userId:
        type: "number"

  product_stored:
    type: "object"
    required:
      - "productName"
      - "price"
      - "productImage"
    properties:
      id:
        type: "integer"
        format: "int64"
      productName:
        type: "string"
        example: "Bagel JyQ"
      price:
        type: "number"
        example: 607
      productImage:
        type: "string"
        example: "https://i.imgur.com/L5IhOun.png"

  product_upload:
    type: "object"
    required:
      - "productName"
      - "price"
      - "productImage"
    properties:
      productName:
        type: "string"
        example: "Bagel JyQ"
      price:
        type: "number"
        example: 607
      productImage:
        type: "string"
        example: "https://i.imgur.com/L5IhOun.png"
 
  order_sent:
    type: "object"
    properties:
      paymentOption:
        type: "string"
        description: "payment method chosen by the user"
        enum:
          - "cash"
          - "card"
      status:
        type: "string"
        description: "order status in the store"
        enum:
          - "creado"
          - "procesando"
          - "en preparaci贸n"
          - "enviado"
      productsId:
        type: "array"
        example: [1,2,3,4]

  order_status_upload:
    type: "object"
    properties:
      status:
        type: "string"
        description: "order status in the store"
        enum:
          - "creado"
          - "procesando"
          - "en preparaci贸n"
          - "enviado"

  order_complete:
    type: "object"
    properties:
      id:
        type: "number"
        example: 1
      payment_method:
        type: "string"
        description: "payment method chosen by the user"
        enum:
          - "cash"
          - "credit card"
      status:
        type: "string"
        enum:
          - "creado"
          - "procesando"
          - "en preparaci贸n"
          - "enviado"
      userId:
        type: "number"
        example: 4
      createdAt:
        type: "string"
        example: "2020-11-22T21:22:14.000Z"
